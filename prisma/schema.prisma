generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int           @id @default(autoincrement())
  value       String        @unique @db.VarChar(255)
  description String        @db.VarChar(255)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  users       UserOnRoles[]
}

model UserOnRoles {
  roleId     Int
  userId     Int
  assignedAt DateTime @default(now())
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roleId, userId])
}

model User {
  id         Int           @id @default(autoincrement())
  email      String        @unique @db.VarChar(255)
  name       String        @db.VarChar(50)
  surname    String        @db.VarChar(50)
  password   String        @db.VarChar(255)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  roles      UserOnRoles[]
  instructor Instructor?
  client     Client?
}

model Client {
  userId    Int               @id
  banned    Boolean?          @default(false)
  banReason String?           @db.VarChar(255)
  user      User              @relation(fields: [userId], references: [id])
  classes   ClientOnClasses[]
}

model Instructor {
  userId  Int     @id
  user    User    @relation(fields: [userId], references: [id])
  classes Class[]
}

model Class {
  id                  Int               @id @default(autoincrement())
  name                String            @db.VarChar(255)
  description         String            @db.VarChar(255)
  startDate           DateTime
  endDate             DateTime
  maximumParticipants Int
  instructorId        Int
  placeId             Int
  participants        ClientOnClasses[]
  place               Place             @relation(fields: [placeId], references: [id])
  instructor          Instructor        @relation(fields: [instructorId], references: [userId])
}

model Place {
  id    Int     @id @default(autoincrement())
  name  String  @unique @db.VarChar(255)
  city  String
  Class Class[]
}

model ClientOnClasses {
  classId    Int
  enrolledAt DateTime @default(now())
  clientId   Int
  class      Class    @relation(fields: [classId], references: [id])
  client     Client   @relation(fields: [clientId], references: [userId])

  @@id([clientId, classId])
}
